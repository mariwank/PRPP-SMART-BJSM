  model
  { 
    for (i in 1:N){   # N is total sample size
      # likelihood
      Y1[i]~dbern(pi_1[i])
      Y2[i]~dbern(pi_2[i])
      # explaining
      pi_1[i] <- ifelse(preference_stageI[i] == 0, pi[treatment_stageI[i]], # A0/B0
                        ifelse(preference_stageI[i] == 1 && treatment_stageI[i] == 1, alphaP[1] * pi[treatment_stageI[i]], alphaP[2] * pi[treatment_stageI[i]])) # A1/B1
      
      
      pi_2[i] <- ifelse(Y1[i] == 1 && preference_stageI[i] == 0, 
                        pi[treatment_stageII[i]] * beta[treatment_stageI[i]], # A0A/B0B
                        ifelse(Y1[i] == 1 && preference_stageI[i] == 1 && treatment_stageI[i] == 1,  alphaP[1] * pi[treatment_stageII[i]] * beta[treatment_stageI[i]], # A1A
                               ifelse(Y1[i] == 1 && preference_stageI[i] == 1 && treatment_stageI[i] == 2, alphaP[2] * pi[treatment_stageII[i]] * beta[treatment_stageI[i]], # B1B
                                      ifelse(Y1[i] == 0 &&  preference_stageI[i] == 0 && preference_stageII[i] == 0, pi[treatment_stageII[i]], # A0C0/A0D0/B0C0/B0D0
                                             ifelse(Y1[i] == 0 &&  preference_stageI[i] == 0 && preference_stageII[i] == 1 && treatmentCD_stageII[i] == 3, alphaP[3] * pi[treatment_stageII[i]], # A0C1/B0C1
                                                    ifelse(Y1[i] == 0 &&  preference_stageI[i] == 0 && preference_stageII[i] == 1 && treatmentCD_stageII[i] == 4, alphaP[4] * pi[treatment_stageII[i]], # A0D1/B0D1
                                                           ifelse(Y1[i] == 0 &&  preference_stageI[i] == 1 && preference_stageII[i] == 0 && treatment_stageI[i] == 1, alphaP[1] * pi[treatment_stageII[i]], # A1C0/A1D0
                                                                  ifelse(Y1[i] == 0 &&  preference_stageI[i] == 1 && preference_stageII[i] == 0 && treatment_stageI[i] == 2, alphaP[2] * pi[treatment_stageII[i]], # B1C0/B1D0 
                                                                         ifelse(Y1[i] == 0 &&  preference_stageI[i] == 1 && preference_stageII[i] == 1 && treatment_stageI[i] == 1 && treatmentCD_stageII[i] == 3, alphaP[1] * alphaP[3] * pi[treatment_stageII[i]], # A1C1
                                                                                ifelse(Y1[i] == 0 &&  preference_stageI[i] == 1 && preference_stageII[i] == 1 && treatment_stageI[i] == 1 && treatmentCD_stageII[i] == 4, alphaP[1] * alphaP[4] * pi[treatment_stageII[i]], # A1D1
                                                                                       ifelse(Y1[i] == 0 &&  preference_stageI[i] == 1 && preference_stageII[i] == 1 && treatment_stageI[i] == 2 && treatmentCD_stageII[i] == 3, alphaP[2] * alphaP[3] * pi[treatment_stageII[i]], alphaP[2] * alphaP[4] * pi[treatment_stageII[i]]))))))))))) # B1C1 and B1D1
      
      
      
      
    }
    
    alphaP[1] ~ dgamma(alphaP_prior_a,alphaP_prior_b) # alpha1A
    alphaP[2] ~ dgamma(alphaP_prior_a,alphaP_prior_b) # alpha1B
    alphaP[3] ~ dgamma(alphaP_prior_a,alphaP_prior_b) # alpha2C
    alphaP[4] ~ dgamma(alphaP_prior_a,alphaP_prior_b) # alpha2D
    beta[1] ~ dgamma(beta1_prior_a,beta1_prior_b)     # beta1A
    beta[2] ~ dgamma(beta1_prior_a,beta1_prior_b)     # beta1B
    
    for (j in 1:num_paths){
      pi[j] ~ dbeta(pi_prior_a[j],pi_prior_b[j]) T(0.001,0.999) # no semicolon needed here but if you define the JAGS in R via a function it is needed due to differences between the BUGS and R languages
    }
    
    # DTR
    DTR[1] = pi[1] * (pi[1]*beta[1]) + (1 - pi[1]) * pi[3] ## AAC00
    DTR[2] = pi[1] * (pi[1]*beta[1]) + (1 - pi[1]) * pi[4] ## AAD00
    DTR[3] = pi[2] * (pi[2]*beta[2]) + (1 - pi[2]) * pi[5] ## BBC00
    DTR[4] = pi[2] * (pi[2]*beta[2]) + (1 - pi[2]) * pi[6] ## BBD00
    DTR[5] = pi[1] * (pi[1]*beta[1]) + (1 - pi[1]) * (alphaP[3]*pi[3]) ## AAC01
    DTR[6] = pi[1] * (pi[1]*beta[1]) + (1 - pi[1]) * (alphaP[4]*pi[4]) ## AAD01
    DTR[7] = pi[2] * (pi[2]*beta[2]) + (1 - pi[2]) * (alphaP[3]*pi[5]) ## BBC01
    DTR[8] = pi[2] * (pi[2]*beta[2]) + (1 - pi[2]) * (alphaP[4]*pi[6])  ## BBD01
    DTR[9] = (alphaP[1]*pi[1]) * (pi[1]*alphaP[1]*beta[1]) + (1 - alphaP[1]*pi[1]) * (alphaP[1]*pi[3]) ## AAC10
    DTR[10] = (alphaP[1]*pi[1]) * (pi[1]*alphaP[1]*beta[1]) + (1 - alphaP[1]*pi[1]) * (alphaP[1]*pi[4]) ## AAD10
    DTR[11] = (alphaP[2]*pi[2]) * (pi[2]*alphaP[2]*beta[2]) + (1 - alphaP[2]*pi[2]) * (alphaP[2]*pi[5]) ## BBC10
    DTR[12] = (alphaP[2]*pi[2]) * (pi[2]*alphaP[2]*beta[2]) + (1 - alphaP[2]*pi[2]) * (alphaP[2]*pi[6]) ## BBD10
    DTR[13] = (alphaP[1]*pi[1]) * (pi[1]*alphaP[1]*beta[1])  + (1 - alphaP[1]*pi[1]) * (alphaP[1]*alphaP[3]*pi[3]) ## AAC11
    DTR[14] = (alphaP[1]*pi[1]) * (pi[1]*alphaP[1]*beta[1])  + (1 - alphaP[1]*pi[1]) * (alphaP[1]*alphaP[4]*pi[4]) ## AAD11
    DTR[15] =  (alphaP[2]*pi[2]) * (pi[2]*alphaP[2]*beta[2])  + (1 - alphaP[2]*pi[2]) * (alphaP[2]*alphaP[3]*pi[5]) ## BBC11
    DTR[16] = (alphaP[2]*pi[2]) * (pi[2]*alphaP[2]*beta[2])  + (1 - alphaP[2]*pi[2]) * (alphaP[2]*alphaP[4]*pi[6]) ## BBD11
    
  }